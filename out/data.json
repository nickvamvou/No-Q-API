{
    "project": {},
    "files": {
        "api/shopping_cart/shopping_cart.js": {
            "name": "api/shopping_cart/shopping_cart.js",
            "modules": {},
            "classes": {
                "Cart": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "api/store/store.js": {
            "name": "api/store/store.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "api/user/index.js": {
            "name": "api/user/index.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "api/user/user.js": {
            "name": "api/user/user.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Cart": {
            "name": "Cart",
            "shortname": "Cart",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "api/shopping_cart/shopping_cart.js",
            "line": 1,
            "description": "This class contains code describing the customer cart functionality."
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "api/shopping_cart/shopping_cart.js",
            "line": 34,
            "description": "`{url}/shopping_cart/userId/RFID/add`\n\nThe particular method adds a particular product (based on RFID received) to the Cart of the user and if the user\ndoes not have a Cart it creates a new one.",
            "itemtype": "method",
            "name": "addProductToCart",
            "params": [
                {
                    "name": "RFID",
                    "description": ""
                },
                {
                    "name": "Barcode",
                    "description": ""
                },
                {
                    "name": "Secured",
                    "description": "(boolean)"
                }
            ],
            "return": {
                "description": "Product Details (Product information associated with the RFID received)"
            },
            "throws": {
                "description": "Error (404) when RFID is not found.\n            Error (500) System Failure.\n            Error (404) when User already has product in his/her Cart."
            },
            "class": "Cart"
        },
        {
            "file": "api/store/store.js",
            "line": 14,
            "description": "Responsible for creating a new store.\nThe owner of the store is obtained from req under the user data.",
            "return": {
                "description": "On Success JSON returned as .",
                "type": "\"Store created\", store_id"
            },
            "class": ""
        },
        {
            "file": "api/store/store.js",
            "line": 79,
            "description": "Remove store from a retailer given the id of the store.\nOnly administrators can remove stores.",
            "return": {
                "description": "On Success the function returns JSON",
                "type": "\"Store deleted\", store_id"
            },
            "class": ""
        },
        {
            "file": "api/store/store.js",
            "line": 330,
            "description": "Creates a new product detail and returns the id of the created row.",
            "params": [
                {
                    "name": "req",
                    "description": "Should include userData, storeId as a parameter\n            product details name, description and id in the request\n            body.",
                    "type": "Id, role"
                },
                {
                    "name": "res",
                    "description": "If successful then a JSON with the created\n                       product detail id. Otherwise the appropraite\n                       error message.",
                    "type": "[type]"
                }
            ],
            "class": ""
        },
        {
            "file": "api/store/store.js",
            "line": 387,
            "description": "Adds the products option groups and values given by the user.",
            "params": [
                {
                    "name": "req",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "res",
                    "description": "[description]",
                    "type": "[type]"
                },
                {
                    "name": "next",
                    "description": "[description]",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "api/user/index.js",
            "line": 29,
            "description": "Change user password.\nUser must be logged in.\nOld password should be provided.",
            "class": ""
        },
        {
            "file": "api/user/user.js",
            "line": 17,
            "description": "Check if email exists by getting the customer id by email.\nIf zero results returned then the email is available for registration.",
            "class": ""
        },
        {
            "file": "api/user/user.js",
            "line": 52,
            "description": "Sign-up a Retailer with a hashed password.\nAccepts (email, password, companyName, brandName).",
            "class": ""
        },
        {
            "file": "api/user/user.js",
            "line": 226,
            "description": "Change the password of the user.\nAccepts: (oldPassword, newPassword).",
            "class": ""
        },
        {
            "file": "api/user/user.js",
            "line": 309,
            "description": "Allow Admins to change user passwords.\nAccepts: (newPassword).",
            "class": ""
        },
        {
            "file": "api/user/user.js",
            "line": 399,
            "description": "Checks if user is authorized to access data based on role.\nOne way is for the user requesting the action to be the user logged in.\nSecond way is for the person preforming the action to be an admin.",
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nResponsible for creating a new store.\nThe owner of the store is obtained from req under the user data.",
            "line": " api/store/store.js:14"
        },
        {
            "message": "Missing item type\nRemove store from a retailer given the id of the store.\nOnly administrators can remove stores.",
            "line": " api/store/store.js:79"
        },
        {
            "message": "Missing item type\nCreates a new product detail and returns the id of the created row.",
            "line": " api/store/store.js:330"
        },
        {
            "message": "Missing item type\nAdds the products option groups and values given by the user.",
            "line": " api/store/store.js:387"
        },
        {
            "message": "Missing item type\nChange user password.\nUser must be logged in.\nOld password should be provided.",
            "line": " api/user/index.js:29"
        },
        {
            "message": "Missing item type\nCheck if email exists by getting the customer id by email.\nIf zero results returned then the email is available for registration.",
            "line": " api/user/user.js:17"
        },
        {
            "message": "Missing item type\nSign-up a Retailer with a hashed password.\nAccepts (email, password, companyName, brandName).",
            "line": " api/user/user.js:52"
        },
        {
            "message": "Missing item type\nChange the password of the user.\nAccepts: (oldPassword, newPassword).",
            "line": " api/user/user.js:226"
        },
        {
            "message": "Missing item type\nAllow Admins to change user passwords.\nAccepts: (newPassword).",
            "line": " api/user/user.js:309"
        },
        {
            "message": "Missing item type\nChecks if user is authorized to access data based on role.\nOne way is for the user requesting the action to be the user logged in.\nSecond way is for the person preforming the action to be an admin.",
            "line": " api/user/user.js:399"
        }
    ]
}